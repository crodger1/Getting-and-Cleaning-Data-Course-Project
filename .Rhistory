FALSE&FALSE
TRUE&c(TRUE,FALSE,FALSE)
TRUE&&c(TRUE,FALSE,FALSE)
TRUE|c(TRUE,FALSE,FALSE)
TRUE||c(TRUE,FALSE,FALSE)
5>8 || 6!=8&&4>3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
q)()
q()
library(Swirl)
library(swirl)
rm(list=ls())
swirl()
head(flags)
dim(flags)
class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals<-lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
q()
mat <- matrix(1:9, nrow=3, ncol=3)
mat
solve(mat)
mat2 <- matrix(1:3 1:3 1:3, nrow=3, ncol=3)
mat2 <- matrix(c(27:29, 4:1, 1:3), nrow=3, ncol=3)
mat2 <- matrix(c(27:29, 4:2, 1:3), nrow=3, ncol=3)
mat2
solve(mat2)
mat2<-matrix(c(2,3,2,2), nrow=2, ncol=2)
mat2
solve(mat2)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
mat2<-matrix(c(2,3,2,2), nrow=2, ncol=2)
cachemean(c(1,2,3))
cachemean(1,2,3))
cachemean(1,2,3)
mean(1,2,3)
xvect<-vector(1,2,6)
xvect<-c(1,2,6)
xvect
type(xvect)
attributes(xvect)
attr(xvect)
?vectpr
?vector
is.vector(xvect)
getmean(xvect)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(xvect)
cachemean(1:2)
cachemean(4)
makevector(1:3)
makeVector(1:3)
cachemean()
cachemean(1:3)
mean(1:3)
mean(1:3)
getmean(1:3)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x<-1:100
x
vec<-makeVector(x)
vec
vec$getmean()
mx<mean(x)
mx<-mean(x)
vec$setmean(mx)
vec$getmean()
cachemean(x)
x
vec
cachemean(vec)
vec2<-makevec(1:50)
vec2<-makeVector(1:50)
cachemean(vec2)
cachemean(vec2)
## Put comments here that give an overall description of what your
## functions do
# The first function, `makeVector` creates a special "vector", which is
# really a list containing a function to
#
# 1.  set the value of the vector
# 2.  get the value of the vector
# 3.  set the value of the mean
# 4.  get the value of the mean
#
# makeVector <- function(x = numeric()) {
#   m <- NULL
#   set <- function(y) {
#     x <<- y
#     m <<- NULL
#   }
#   get <- function() x
#   setmean <- function(mean) m <<- mean
#   getmean <- function() m
#   list(set = set, get = get,
#        setmean = setmean,
#        getmean = getmean)
# }
# mat2<-matrix(c(2,3,2,2), nrow=2, ncol=2)
## keep comment:
# `makeCacheMatrix`: This function creates a special "matrix" object
# that can cache the inverse of a matrix
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## keep comment
# `cacheSolve`: This function computes the inverse of the special
# "matrix" returned by `makeCacheMatrix` above. If the inverse has
# already been calculated (and the matrix has not changed), then
# `cacheSolve` should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- inv(data, ...)
x$setinv(m)
m
}
cmat<-matrix(c(2,3,2,2), nrow=2, ncol=2)
cmat
cmatc<-makeCacheMatrix(cmat)
cmatc
cmatc$get
cacheSolve(cmatc)
source('~/Coursera/ProgrammingAssignment12/cachematrix2.R')
cacheSolve(cmatc)
cacheSolve(cmatc)
source('~/Coursera/ProgrammingAssignment12/cachematrix2.R')
undebug(ls)
set.seed(1)
rpois(5,2)
x<-rpois(5,2)
attrib(x)
attr(x)
attributes(x)
q)(
q()
swirl()
package(swirl)
library(swirl)
ls()
rm(list=ls())
ls()
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl
swirl()
mydf<-read.csv(path2csv,strigsAsFactors=FALSE)
mydf<-read.csv(file=path2csv,strigsAsFactors=FALSE)
play()
?read.csv
nxt()
mydf<-read.csv(file=path2csv,stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
play()
q()
library(swirl)
Chris
ls()
rm(list=ls())
swirl
swilr()
swirl()
library(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
help()
swirl()
back()
bye()
swirl()
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
group_by(cran,package)
by_package<-group_by(cran, package)
by_package
summarize(by_package,mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs=0.99)
top_counts<-filter(pack_sum, pack_sum$count>679)
top_counts<-filter(pack_sum, count>679)
top_counts
View(top_counts)
top_counts_sorted<-arrange(top_counts,desc(count))
View()
View(top_counts_sorted)
quantile(pack_sum$unique, probs=0.99)
top_unique<-filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(results3)
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
q()
getwd()
setwd("/.Github")
setwd("./Github")
dir
ls()
dir()
setwd("C:/Users/crodger/Documents/GitHub/Getting-and-Cleaning-Data-Course-Project")
dir()
features<-read.table("./UCI HAR Dataset/features.txt",stringsAsFactors=FALSE)
vnames<-features[,2]
means<-grep("mean()",vnames,ignore.case=TRUE)
stds<-grep("std()",vnames,ignore.case=TRUE)
keep<-sort(c(means,stds))  # used to retain original var sequence
keep
x_test<-read.table("./UCI HAR Dataset/test/x_test.txt")
head(x_test[,3:6])
attr(x_test, "names")<-vnames # adds variable names based on
head(x_test[,3:6])
x_test<-x_test[,keep]
head(x_test[,1:6])
x_test<-read.table("./UCI HAR Dataset/test/x_test.txt")
head(x_test[,1:6])
attr(x_test, "names")<-vnames # adds variable names based on
head(x_test[,1:6])
head(x_test[,3:10])
head(x_test[,4:10])
x_test<-x_test[,keep]
source('~/.active-rstudio-document', echo=TRUE)
head(subject_test)
subject_test$Source<-"Test"
head(subject_test)
cbind("Test",subject_test)
head(cbind("Test",subject_test))
subject_test2<-cbind("Test",subject_test)
head(subject_test2)
attr(subject_test2[,1], "names")<-c("Source Data")
head(subject_test2)
attr(subject_test2[,1], "names")<-"Source Info"
head(subject_test2)
names(subject_test2)[names(subject_test2 == "Test")]<-"Source"
head(subject_test2)
names(subject_test2)[names(subject_test2 == '"Test"')]<-'Source'
head(subject_test2)
attr(subject_test2)
attr(subject_test2,"names")
subject_train<-read.table("./UCI HAR Dataset/train/subject_train.txt")
attr(subject_train, "names")<-c("Subject")
head(subject_train)
y_train<-read.table("./UCI HAR Dataset/train/y_train.txt")
attr(y_train, "names")<-c("Activity")
head(y_train)
train<-cbind(Source="Train",subject_train,y_train,x_train)
head(train)
?grep
means
means<-grep("mean()",vnames,ignore.case=TRUE,fixed=TRUE)  # keeps if text contains "mean()"
means
vnames<-features[,2]              # check import of data
features<-read.table("./UCI HAR Dataset/features.txt",stringsAsFactors=FALSE)
vnames<-features[,2]              # check import of data
vnames
keepers<-vnames %in% c("mean()","std()")
keepers
keepers<-vnames %in% "mean()"
keepers
keepers<-match(vnames,"mean()")
keepers
vnames<-features[,2]
means<-grep("mean()",vnames,fixed=TRUE)  # keeps if text contains "mean()"
Means<-grep("Mean()",vnames,fixed=TRUE)  # keeps if text contains "mean()"
stds<-grep("std()",vnames,fixed=TRUE)    # keeps if text contains "std()"
stds<-grep("Std()",vnames,fixed=TRUE)    # keeps if text contains "std()"
keep<-sort(c(means,Means,stds,Stds))         # used to retain original var sequence
stds<-grep("std()",vnames,fixed=TRUE)    # keeps if text contains "std()"
Stds<-grep("Std()",vnames,fixed=TRUE)    # keeps if text contains "std()"
keep<-sort(c(means,Means,stds,Stds))         # used to retain original var sequence
keep
dim(keep)
length(keep)
x_test<-read.table("./UCI HAR Dataset/test/x_test.txt")
head(x_test[,4:10])             # checking table import
attr(x_test, "names")<-vnames   # adds variable names
head(x_test[,4:10])             # checking variable names added
## restrict to means and standard deviations data only
x_test<-x_test[,keep]           # restricting to columns of interest
head(x_test[,4:10])             # confirming data restricted to cols of interest
means
Means
std
stds
Stds
length(means)
length(Means)
length(stds)
length(Stds)
ls()
rm(ls())
?rm()
rm(list=ls())
ls()
features<-read.table("./UCI HAR Dataset/features.txt",stringsAsFactors=FALSE)
vnames<-features[,2]
## create an index for the columns that should be kept by matching
## to text "mean()" and "std()" (non-case sensitive)
means<-grep("mean()",vnames,fixed=TRUE)  # keeps if text contains "mean()"
Means<-grep("Mean()",vnames,fixed=TRUE)  # keeps if text contains "mean()"
stds<-grep("std()",vnames,fixed=TRUE)    # keeps if text contains "std()"
Stds<-grep("Std()",vnames,fixed=TRUE)    # keeps if text contains "std()"
keep<-sort(c(means,Means,stds,Stds))     # used to retain original var sequence
## read in the main analysis datasets (x_test and x_train)
## read test data
x_test<-read.table("./UCI HAR Dataset/test/x_test.txt")
head(x_test[,4:10])             # checking table import
attr(x_test, "names")<-vnames   # adds variable names
head(x_test[,4:10])             # checking variable names added
## restrict to means and standard deviations data only
x_test<-x_test[,keep]           # restricting to columns of interest
head(x_test[,4:10])             # confirming data restricted to cols of interest
## read train data
x_train<-read.table("./UCI HAR Dataset/train/x_train.txt")
head(x_train[,4:10])            # checking table import
attr(x_train, "names")<-vnames  # adds variable names
head(x_train[,4:10])            # checking variable names added
## restrict to means and standard deviations
x_train<-x_train[,keep]         # restricting to columns of interest
head(x_train[,4:10])            # confirming data restricted to cols of interest
## add information on subject (person tested) and the activity (e.g. walking)
## add this information to test data
subject_test<-read.table("./UCI HAR Dataset/test/subject_test.txt")
attr(subject_test, "names")<-c("Subject")
head(subject_test)
y_test<-read.table("./UCI HAR Dataset/test/y_test.txt")
attr(y_test, "names")<-c("Activity")
head(y_test)
## combine the test data with subject and activity, add variable indicating Source
test<-cbind(Source="Test",subject_test,y_test,x_test)
## add this information to the train data
subject_train<-read.table("./UCI HAR Dataset/train/subject_train.txt")
attr(subject_train, "names")<-c("Subject")
head(subject_train)
y_train<-read.table("./UCI HAR Dataset/train/y_train.txt")
attr(y_train, "names")<-c("Activity")
head(y_train)
## combine the train data with subject and activity, add variable indicating Source
train<-cbind(Source="Train",subject_train,y_train,x_train)
## combine the full test and train data
## start by checking what the dimensions should be
dim(train)
dim(test)
nrow(train)+nrow(test)
## combine and check new dimensions
fulldata<-rbind(train,test)
dim(fulldata)
## change the Activity column to use activity name labels instead of just values
fulldata$Activity <- factor(fulldata$Activity,
levels = (1,2,3,
fulldata$Activity <- factor(fulldata$Activity,
levels = (1,2,3,4,5,6),
labels = ("Walking", "Walking Upstairs", "Walking Downstairs", "Sitting", "Standing", "Laying"))
head(fulldata[,1:6])
fulldata$Activity <- factor(fulldata$Activity,
levels = c(1,2,3,4,5,6),
labels = c("Walking", "Walking Upstairs", "Walking Downstairs", "Sitting", "Standing", "Laying") )
head(fulldata[,1:6])
## collapse the data to get the means for mean() and std() information
## create a list of variables to sumamrize (exclude the grouping vars Source, Subject and Activity)
vars<-attr(fulldata[,-c(1,2,3)],"names")
head(fulldata[,1:6])
library(dplyr)
mean_data <- fulldata %>%
group_by(Source,Subject,Activity) %>%
summarise_each(funs(mean))
head(mean_data[,1:10])
## export the data for uploading to course website
write.table(mean_data,"./summary_file.txt",row.name=FALSE)
mean_data <- fulldata %>%
group_by(Source,Subject,Activity) %>%
summarise_each(funs(mean))
write.table(mean_data,"./summary_file.txt",row.name=FALSE)
keep
vnames
keep[1,2]
keep[1:2]
vnames(1:2)
vnames[1:2]
vnames(keep)
vnames([keep])
vnames%in%keep
dim(mean_data)
