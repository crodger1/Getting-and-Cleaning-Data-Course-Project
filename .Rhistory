q()
library(xlsx)
library(rJava)
install.packages("httr")
library(httr)
?httr
oauth_endpoints("github")
?oauth_app
myapp <- oauth_app("github","7e6d9b4893d85cbd602b", "62a3e0b3b4cfe95151f2a35cd4c80a3293e53db2")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
content(req)
myapp <- oauth_app("github","7e6d9b4893d85cbd602b","62a3e0b3b4cfe95151f2a35cd4c80a3293e53db2")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
library(httpuv)
install.packages("httpuv")
library(httpuv)
oauth_endpoints("github")
myapp <- oauth_app("github","7e6d9b4893d85cbd602b","62a3e0b3b4cfe95151f2a35cd4c80a3293e53db2")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
stop_for_status(req)
myapp <- oauth_app("github","62a3e0b3b4cfe95151f2a35cd4c80a3293e53db2")
myapp <- oauth_app("github","7e6d9b4893d85cbd602b")
myapp <- oauth_app("github",key="Client ID",secret = "CLIENT SECRET")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github",key="Client ID",secret = "CLIENT SECRET")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
library(httr)
library(httpuv)
oauth_endpoints("github")
myapp <- oauth_app("github",key="Client ID",secret = "CLIENT SECRET")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
# myapp <- oauth_app("github",key="Client ID",secret = "CLIENT SECRET")
myapp <- oauth_app("github",key="7e6d9b4893d85cbd602b",secret = "62a3e0b3b4cfe95151f2a35cd4c80a3293e53db2")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
head(req$created_at)
View(req)
attributes(req)
req$date
req
View(req)
dim(req)
json1=content(req)
json2=jsonlite::fromJSON(toJSON(json1))
install.packages("jsonlite")
install.packages("jsonlite")
json2=jsonlite::fromJSON(toJSON(json1))
df<-fromJSON(json1)
library(jsonlite)
json2=jsonlite::fromJSON(toJSON(json1))
head(json2)
View(json2)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("jsonlite")
con=url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode=readLines(con)
close(con)
head(htmlCode)
nchar(htmlCode[10,])
nchar(htmlCode[10,1])
nchar(htmlCode)
nchar(htmlCode[,10])
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
?write.table()
source('~/GitHub/Getting-and-Cleaning-Data-Course-Project/run_analysis.R')
getwd()
install.packages("manipulate")
setwd("~/GitHub/Getting-and-Cleaning-Data-Course-Project")
source('~/GitHub/Getting-and-Cleaning-Data-Course-Project/run_analysis.R')
features<-read.table("./UCI HAR Dataset/features.txt",stringsAsFactors=FALSE)
vnames<-features[,2]
## create an index for the columns that should be kept
means<-grep("mean()",vnames,ignore.case=TRUE)
stds<-grep("std()",vnames,ignore.case=TRUE)
keep<-sort(c(means,stds))
## read in the main analysis datasets (x_test and x_train)
x_test<-read.table("./UCI HAR Dataset/test/x_test.txt")
head(x_test[,3:6])
attr(x_test, "names")<-vnames
head(x_test[,3:6])
## restrict to means and standard deviations
x_test<-x_test[,keep]
head(x_test[,1:6])
x_train<-read.table("./UCI HAR Dataset/train/x_train.txt")
head(x_train[,3:6])
attr(x_train, "names")<-vnames
head(x_train[,3:6])
## restrict to means and standard deviations
x_train<-x_train[,keep]
head(x_train[,1:6])
#grep("mean",vnames,ignore.case=TRUE)+2
# x_test2<-x_test[,grep("mean",vnames,ignore.case=TRUE)]
# head(x_test2[,1:10])
## combine these data with the subject (person tested) and the activity (e.g. walking)
# attr(x_test,"names")
subject_test<-read.table("./UCI HAR Dataset/test/subject_test.txt")
attr(subject_test, "names")<-c("Subject")
head(subject_test)
y_test<-read.table("./UCI HAR Dataset/test/y_test.txt")
attr(y_test, "names")<-c("Activity")
head(y_test)
## combine the test data with subject and activity
test<-cbind(subject_test,y_test,x_test)
subject_train<-read.table("./UCI HAR Dataset/train/subject_train.txt")
attr(subject_train, "names")<-c("Subject")
head(subject_train)
y_train<-read.table("./UCI HAR Dataset/train/y_train.txt")
attr(y_train, "names")<-c("Activity")
head(y_train)
## combine the train data with subject and activity
train<-cbind(subject_train,y_train,x_train)
## combine the full test and train data
dim(train)
dim(test)
nrow(train)+nrow(test)
fulldata<-rbind(train,test)
dim(fulldata)
## create a list of variables to sumamrize (need to exclude the grouping vars of Subject and Activity)
vars<-attr(fulldata[,-c(1,2)],"names")
library(dplyr)
mean_data <- fulldata %>%
group_by(Subject,Activity) %>%
summarise_each(funs(mean))
write.table(mean_data,"./summary_file.txt",row.name=FALSE)
