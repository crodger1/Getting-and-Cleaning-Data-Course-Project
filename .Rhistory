search()
ls()
get_path()
args(install)
install.packages("kernsmooth")
install.packages("KernSmooth")
library(KernSmooth)
q()
library(swirl)
ls()
rm(list=ls())
ls()
swirl()
1:20
pi:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2), each=10)
q()
library(swirl)
rm(list=ls())
swirl()
num_Vect<-(.5,55.-10,6)
num_Vect<-c(.5,55.-10,6)
num_vect<-c(.5,55.-10,6)
?c
num_vect<-c(.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
c("My","Name","is")
my_char<-c("My","Name","is")
my_char<-c("My","name","is")
my_char
paste(my_char,collapse = " ")
my_name<-c(my_char,"Chris")
my_name
paste(my_name,collapse=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"), sep="")
paste(LETTERS,1:4,sep="-")
q()
library(swirl)
ls
ls()
rm(list=ls())
ls()
swirl()
x<-c(44,NA,5,NA)
3*x
y<-rnorm(1000)
z<rep(NA,1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(mydata)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
q()
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
play()
x
nxt()
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-(11,2,NA)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-[1:20]
my_vector<-c(1:20)
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix()
?matrix
my_matrix2<-matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data,cnames)
colnames(my_data)
colnames(my_data)<-cnames
my_data
q()
library(swirl)
rm(list=ls())
swirl()
TRUE==TRUE
(F==T)==F
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!(5==7)
!5==7
FALSE&FALSE
TRUE&c(TRUE,FALSE,FALSE)
TRUE&&c(TRUE,FALSE,FALSE)
TRUE|c(TRUE,FALSE,FALSE)
TRUE||c(TRUE,FALSE,FALSE)
5>8 || 6!=8&&4>3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
q)()
q()
library(Swirl)
library(swirl)
rm(list=ls())
swirl()
head(flags)
dim(flags)
class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals<-lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
q()
mat <- matrix(1:9, nrow=3, ncol=3)
mat
solve(mat)
mat2 <- matrix(1:3 1:3 1:3, nrow=3, ncol=3)
mat2 <- matrix(c(27:29, 4:1, 1:3), nrow=3, ncol=3)
mat2 <- matrix(c(27:29, 4:2, 1:3), nrow=3, ncol=3)
mat2
solve(mat2)
mat2<-matrix(c(2,3,2,2), nrow=2, ncol=2)
mat2
solve(mat2)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
mat2<-matrix(c(2,3,2,2), nrow=2, ncol=2)
cachemean(c(1,2,3))
cachemean(1,2,3))
cachemean(1,2,3)
mean(1,2,3)
xvect<-vector(1,2,6)
xvect<-c(1,2,6)
xvect
type(xvect)
attributes(xvect)
attr(xvect)
?vectpr
?vector
is.vector(xvect)
getmean(xvect)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(xvect)
cachemean(1:2)
cachemean(4)
makevector(1:3)
makeVector(1:3)
cachemean()
cachemean(1:3)
mean(1:3)
mean(1:3)
getmean(1:3)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x<-1:100
x
vec<-makeVector(x)
vec
vec$getmean()
mx<mean(x)
mx<-mean(x)
vec$setmean(mx)
vec$getmean()
cachemean(x)
x
vec
cachemean(vec)
vec2<-makevec(1:50)
vec2<-makeVector(1:50)
cachemean(vec2)
cachemean(vec2)
## Put comments here that give an overall description of what your
## functions do
# The first function, `makeVector` creates a special "vector", which is
# really a list containing a function to
#
# 1.  set the value of the vector
# 2.  get the value of the vector
# 3.  set the value of the mean
# 4.  get the value of the mean
#
# makeVector <- function(x = numeric()) {
#   m <- NULL
#   set <- function(y) {
#     x <<- y
#     m <<- NULL
#   }
#   get <- function() x
#   setmean <- function(mean) m <<- mean
#   getmean <- function() m
#   list(set = set, get = get,
#        setmean = setmean,
#        getmean = getmean)
# }
# mat2<-matrix(c(2,3,2,2), nrow=2, ncol=2)
## keep comment:
# `makeCacheMatrix`: This function creates a special "matrix" object
# that can cache the inverse of a matrix
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## keep comment
# `cacheSolve`: This function computes the inverse of the special
# "matrix" returned by `makeCacheMatrix` above. If the inverse has
# already been calculated (and the matrix has not changed), then
# `cacheSolve` should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- inv(data, ...)
x$setinv(m)
m
}
cmat<-matrix(c(2,3,2,2), nrow=2, ncol=2)
cmat
cmatc<-makeCacheMatrix(cmat)
cmatc
cmatc$get
cacheSolve(cmatc)
source('~/Coursera/ProgrammingAssignment12/cachematrix2.R')
cacheSolve(cmatc)
cacheSolve(cmatc)
source('~/Coursera/ProgrammingAssignment12/cachematrix2.R')
undebug(ls)
set.seed(1)
rpois(5,2)
x<-rpois(5,2)
attrib(x)
attr(x)
attributes(x)
q)(
q()
swirl()
package(swirl)
library(swirl)
ls()
rm(list=ls())
ls()
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl
swirl()
mydf<-read.csv(path2csv,strigsAsFactors=FALSE)
mydf<-read.csv(file=path2csv,strigsAsFactors=FALSE)
play()
?read.csv
nxt()
mydf<-read.csv(file=path2csv,stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
play()
q()
library(swirl)
Chris
ls()
rm(list=ls())
swirl
swilr()
swirl()
library(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
help()
swirl()
back()
bye()
swirl()
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
group_by(cran,package)
by_package<-group_by(cran, package)
by_package
summarize(by_package,mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs=0.99)
top_counts<-filter(pack_sum, pack_sum$count>679)
top_counts<-filter(pack_sum, count>679)
top_counts
View(top_counts)
top_counts_sorted<-arrange(top_counts,desc(count))
View()
View(top_counts_sorted)
quantile(pack_sum$unique, probs=0.99)
top_unique<-filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(results3)
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
q()
setwd("C:/Users/crodger/Documents/GitHub/Getting-and-Cleaning-Data-Course-Project")
features<-read.table("./UCI HAR Dataset/features.txt",stringsAsFactors=FALSE)
vnames<-features[,2]
x_test<-read.table("./UCI HAR Dataset/test/x_test.txt")
head(x_test[,3:6])
attr(x_test, "names")<-vnames
head(x_test[,3:6])
x_train<-read.table("./UCI HAR Dataset/train/x_train.txt")
attr(x_train, "names")<-vnames
head(x_train[,3:6])
head(x_train[,1:3]
)
subject_test<-read.table("./UCI HAR Dataset/test/subject_test.txt")
head(subject_test)
y_test<-read.table("./UCI HAR Dataset/test/y_test.txt")
head(y_test)
attributes(y_test)
class(y_test)
size(y_test)
dim(y_test)
dim(x_test)
?cbind
cbind(y_test,x_test)
test<-cbind(y_test,x_test)
dim(test)
test<-cbind(subject_test,y_test,x_test)
dim(test)
dim(subject_test)
dim(y_test)
dim(x_test)
test<-cbind(subject_test,y_test,x_test)
head(test[,1:10])
attr(subject_test, "names")<-c("Subject")
head(subject_test)
y_test<-read.table("./UCI HAR Dataset/test/y_test.txt")
attr(subject_test, "names")<-c("Activity")
head(y_test,)
subject_test<-read.table("./UCI HAR Dataset/test/subject_test.txt")
attr(subject_test, "names")<-c("Subject")
head(subject_test)
y_test<-read.table("./UCI HAR Dataset/test/y_test.txt")
attr(y_test, "names")<-c("Activity")
head(y_test)
dim(subject_test)
dim(y_test)
dim(x_test)
test<-cbind(subject_test,y_test,x_test)
dim(test)
head(test[,1:10])
